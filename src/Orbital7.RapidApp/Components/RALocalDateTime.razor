@inject TimeConverter TimeConverter
@inject DisplayValueOptionsBuilder DisplayValueOptionsBuilder
@implements IDisposable

<span class="text-nowrap">
    @if (this.Value.HasValue)
    {
        @GetDateTimeString(this.Value.Value)
    }
    else
    {
        @this.DefaultValue
    }
</span>

@code {

    [Parameter]
    public DateTime? Value { get; set; }

    [Parameter]
    public string? DefaultValue { get; set; } = "-";

    [Parameter]
    public DisplayValueOptions? DisplayValueOptions { get; set; }

    protected override void OnInitialized()
    {
        this.TimeConverter.LocalTimeZoneChanged += LocalTimeZoneChanged;
    }

    public void Dispose()
    {
        this.TimeConverter.LocalTimeZoneChanged -= LocalTimeZoneChanged;
    }

    private void LocalTimeZoneChanged(
        object? sender, 
        System.EventArgs e)
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private string GetDateTimeString(
        DateTime value)
    {
        var options = 
            this.DisplayValueOptions ??
            this.DisplayValueOptionsBuilder.Build();

        var dateTime = options.ForDateTimeUseTimeZoneId.HasText() ?
            this.TimeConverter.ToDateTime(value, options.ForDateTimeUseTimeZoneId) :
            this.TimeConverter.ToLocalDateTime(value);

        if (options.ForDateTimeUseFormat.HasText())
        {
            return dateTime.ToString(options.ForDateTimeUseFormat);
        }
        else
        {
            return dateTime.ToDefaultDateTimeString();
        }
    }
}
