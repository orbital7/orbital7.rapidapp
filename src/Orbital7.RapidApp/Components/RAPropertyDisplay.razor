@typeparam TValue
@inject TimeConverter TimeConverter
@inject DisplayValueOptionsBuilder DisplayValueOptionsBuilder

<RAPropertyLabel For="@this.For"
                 Value="@this.Label"
                 Class="@this.LabelClass" 
                 Style="@this.LabelStyle" />

@if (this.ChildContent != null)
{
    <div class="@this.Class" style="@this.Style">
        @this.ChildContent
    </div>
}
else if (_displayValue != null)
{
    <div class="@this.Class" style="margin-top: -8px; @this.Style">
        @_displayValue
    </div>
}
else
{
    <RALoadingView IsInline="true" />
}

@code {

    private string? _displayValue;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? LabelClass { get; set; }

    [Parameter]
    public string? LabelStyle { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? ValueOverride { get; set; }

    [Parameter]
    public string? DefaultValue { get; set; } = "-";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }

    [Parameter]
    public Func<TValue, Task<string>>? GetDisplayValue { get; set; }

    [Parameter]
    public Action<DisplayValueOptionsBuilder>? ConfigureDisplayValueOptions { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        // Determine the value if we're not showing child content.
        if (this.ChildContent == null)
        {
            // Look for a default value.
            if (this.ValueOverride.HasText())
            {
                _displayValue = this.ValueOverride;
            }
            // Else get the value.
            else if (this.For != null)
            {
                var value = this.For.Compile()();
                if (this.GetDisplayValue != null)
                {
                    _displayValue = await this.GetDisplayValue(value);
                }
                else
                {
                    var memberInfo = this.For.Body.GetMemberInfo();
                    if (memberInfo != null)
                    {
                        this.ConfigureDisplayValueOptions?.Invoke(this.DisplayValueOptionsBuilder);

                        _displayValue = memberInfo.GetDisplayValue(
                            value,
                            this.TimeConverter,
                            options: this.DisplayValueOptionsBuilder.Build());
                    }
            }
            }

            // Use the default value.
            if (!_displayValue.HasText())
            {
                _displayValue = this.DefaultValue;
            }

            // Ensure our display value is not null so it will get rendered above.
            if (!_displayValue.HasText())
            {
                _displayValue = String.Empty;
            }
        }
    }
}
