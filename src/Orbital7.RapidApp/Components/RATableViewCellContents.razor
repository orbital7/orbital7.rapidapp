@typeparam TItem
@inject TimeConverter TimeConverter

@if (this.Column != null &&
     this.Segment != null &&
     this.Item != null)
{
    if (this.Column.IsIndexColumn())
    {
        @this.Index
    }
    else if (this.Column.GetCellContent != null)
    {
        @this.Column.GetCellContent(this.Item)
    }
    else if (this.Column.GetCellValue != null)
    {
        var value = this.Column.GetCellValue(
            this.Column,
            this.Segment,
            this.Item);

        if (value != null && IsDateTime(value.GetType()))
        {
            <RALocalDateTime Value="@((DateTime?)value)"
                             DisplayValueOptions="this.DisplayValueOptions"
                             DefaultValue="@this.Column.DefaultValue" />
        }
        else
        {
            @this.Column.GetDisplayValue(
                value, 
                this.TimeConverter, 
                this.DisplayValueOptions)
        }
    }
    else
    {
        if (IsDateTime(this.Column.GetForType()))
        {
            <RALocalDateTime Value="@((DateTime?)this.Column.GetForValue(this.Item))"
                             DisplayValueOptions="@this.DisplayValueOptions"
                             DefaultValue="@this.Column.DefaultValue" />
        }
        else
        {
            @this.Column.GetItemDisplayValue(
                this.Item, 
                this.TimeConverter, 
                this.DisplayValueOptions)
        }
    }
}

@code {

    [Parameter]
    [EditorRequired]
    public DisplayValueOptions DisplayValueOptions { get; set; } = default!;

    [Parameter]
    public RATableTemplate<TItem>.Column<TItem>? Column { get; set; }

    [Parameter]
    public RATableViewSegment<TItem>? Segment { get; set; }

    [Parameter]
    public TItem? Item { get; set; }

    [Parameter]
    public int Index { get; set; }

    private bool IsDateTime(
        Type? type)
    {
        return type != null && 
            (type == typeof(DateTime) || 
             type == typeof(DateTime?));
    }
}
